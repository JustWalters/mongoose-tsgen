/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

import { Prop, Schema } from '@nestjs/mongoose';
import { SchemaFactory } from 'app/core/infrastructure/schema.factory';

/**
 * Lean version of HomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `HomeDocument.toObject()`. To avoid conflicts with model names, use the type alias `HomeObject`.
 * ```
 * const homeObject = home.toObject();
 * ```
 */
@Schema({"_id":false})
export class Home extends mongoose.Types.Document {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const HomeSchema = SchemaFactory.createForClass(Home);


/**
 * Lean version of DeviceHomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `DeviceDocument.toObject()`.
 * ```
 * const deviceObject = device.toObject();
 * ```
 */
@Schema({"_id":false})
export class DeviceHome extends mongoose.Types.Subdocument {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const DeviceHomeSchema = SchemaFactory.createForClass(DeviceHome);

/**
 * Lean version of DeviceDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `DeviceDocument.toObject()`. To avoid conflicts with model names, use the type alias `DeviceObject`.
 * ```
 * const deviceObject = device.toObject();
 * ```
 */
@Schema()
export class Device extends mongoose.Types.Document {
@Prop()
name?: string;
_id: mongoose.Types.ObjectId;
@Prop({"type":DeviceHomeSchema})
home?: DeviceHome;
}

export const DeviceSchema = SchemaFactory.createForClass(Device);


/**
 * Lean version of Device2HomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device2Document.toObject()`.
 * ```
 * const device2Object = device2.toObject();
 * ```
 */
@Schema({"_id":false})
export class Device2Home extends mongoose.Types.Subdocument {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const Device2HomeSchema = SchemaFactory.createForClass(Device2Home);

/**
 * Lean version of Device2Document
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device2Document.toObject()`. To avoid conflicts with model names, use the type alias `Device2Object`.
 * ```
 * const device2Object = device2.toObject();
 * ```
 */
@Schema()
export class Device2 extends mongoose.Types.Document {
@Prop()
name?: string;
_id: mongoose.Types.ObjectId;
@Prop({"type":Device2HomeSchema})
home?: Device2Home;
}

export const Device2Schema = SchemaFactory.createForClass(Device2);


/**
 * Lean version of Device3HomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device3Document.toObject()`.
 * ```
 * const device3Object = device3.toObject();
 * ```
 */
@Schema({"_id":false})
export class Device3Home extends mongoose.Types.Subdocument {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const Device3HomeSchema = SchemaFactory.createForClass(Device3Home);

/**
 * Lean version of Device3Document
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device3Document.toObject()`. To avoid conflicts with model names, use the type alias `Device3Object`.
 * ```
 * const device3Object = device3.toObject();
 * ```
 */
@Schema()
export class Device3 extends mongoose.Types.Document {
@Prop()
name?: string;
_id: mongoose.Types.ObjectId;
@Prop({"type":Device3HomeSchema})
home?: Device3Home;
}

export const Device3Schema = SchemaFactory.createForClass(Device3);


/**
 * Lean version of Device4HomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device4Document.toObject()`.
 * ```
 * const device4Object = device4.toObject();
 * ```
 */
@Schema({"_id":false})
export class Device4Home extends mongoose.Types.Subdocument {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const Device4HomeSchema = SchemaFactory.createForClass(Device4Home);

/**
 * Lean version of Device4Document
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `Device4Document.toObject()`. To avoid conflicts with model names, use the type alias `Device4Object`.
 * ```
 * const device4Object = device4.toObject();
 * ```
 */
@Schema()
export class Device4 extends mongoose.Types.Document {
@Prop()
name?: string;
_id: mongoose.Types.ObjectId;
@Prop({"type":Device4HomeSchema})
home?: Device4Home;
}

export const Device4Schema = SchemaFactory.createForClass(Device4);


/**
 * Lean version of DeviceDefaultHomeDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `DeviceDefaultDocument.toObject()`.
 * ```
 * const devicedefaultObject = devicedefault.toObject();
 * ```
 */
@Schema({"_id":false})
export class DeviceDefaultHome extends mongoose.Types.Subdocument {
@Prop()
homeId?: string;
@Prop()
homeName?: string;
status: MIGRATE_THIS_VIRTUAL_MANUALLY;
}

export const DeviceDefaultHomeSchema = SchemaFactory.createForClass(DeviceDefaultHome);

/**
 * Lean version of DeviceDefaultDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `DeviceDefaultDocument.toObject()`. To avoid conflicts with model names, use the type alias `DeviceDefaultObject`.
 * ```
 * const devicedefaultObject = devicedefault.toObject();
 * ```
 */
@Schema()
export class DeviceDefault extends mongoose.Types.Document {
@Prop()
name?: string;
_id: mongoose.Types.ObjectId;
@Prop({"type":DeviceDefaultHomeSchema})
home?: DeviceDefaultHome;
}

export const DeviceDefaultSchema = SchemaFactory.createForClass(DeviceDefault);

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 * 
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string 
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
* Helper type used by `PopulatedDocument`. Returns the child property of a string 
* representing a nested property (i.e. `friend.user` -> `user`).
*/
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
* Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated 
* for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
*/
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & { 
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U> ? 
    mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>> :
    Exclude<Root[T], mongoose.Types.ObjectId> 
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<
DocType,
T
> = T extends keyof DocType
? PopulatedProperty<DocType, T> 
: (
    ParentProperty<T> extends keyof DocType
      ? Omit<DocType, ParentProperty<T>> &
      {
        [ref in ParentProperty<T>]: (
          DocType[ParentProperty<T>] extends mongoose.Types.Array<infer U> ? (
            mongoose.Types.Array<
              ChildProperty<T> extends keyof U 
                ? PopulatedProperty<U, ChildProperty<T>> 
                : PopulatedDocument<U, ChildProperty<T>>
            >
          ) : (
            ChildProperty<T> extends keyof DocType[ParentProperty<T>]
            ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
            : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
          )
        )
      }
      : DocType
  )

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(path: T, select?: string | any, model?: string | Model<any, THelpers>, match?: any): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;

    populate<T extends string>(options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;
  }
}

