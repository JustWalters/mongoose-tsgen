/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";
 import { Prop, Schema } from '@nestjs/mongoose';
import { SchemaFactory } from 'app/core/infrastructure/schema.factory';

/**
 * Lean version of UserFriendDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
@Schema({"minimize":true,"typeKey":"type","strict":true})
export class UserFriend extends mongoose.Types.Subdocument {
@Prop({"required":true,"ref":"User","type":mongoose.Types.ObjectId})
uid: User["_id"] | User;
@Prop()
nickname?: string;
_id: mongoose.Types.ObjectId;
}
 export const UserFriendSchema = SchemaFactory.createForClass(UserFriend);

/**
 * Lean version of UserCitySubdocWithoutDefaultDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
@Schema({"minimize":true,"typeKey":"type","strict":true})
export class UserCitySubdocWithoutDefault extends mongoose.Types.Subdocument {
@Prop()
a?: string;
_id: mongoose.Types.ObjectId;
}
 export const UserCitySubdocWithoutDefaultSchema = SchemaFactory.createForClass(UserCitySubdocWithoutDefault);

/**
 * Lean version of UserDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
@Schema({"toObject":{"virtuals":true}})
export class User extends mongoose.Types.Document {
@Prop({"required":true})
email: string;
@Prop({"required":true})
firstName: string;
/** inline jsdoc */
 @Prop({"required":true})
lastName: string;
/**
 * single line jsdoc
 */
 @Prop({"type":mongoose.Schema.Types.Mixed})
metadata?: any;
@Prop({"ref":"User","type":mongoose.Types.ObjectId})
bestFriend?: User["_id"] | User;
/**
 * multiline
 * jsdoc
 */
 @Prop({"type":[UserFriendSchema],"required":true})
friends: mongoose.Types.DocumentArray<UserFriend>;
@Prop({"type":"{\ncoordinates: Number[];\nsubdocWithoutDefault?: UserCitySubdocWithoutDefault[];\n}","required":true})
city: {
coordinates: number[];
subdocWithoutDefault?: UserCitySubdocWithoutDefault[];
};
@Prop({"type":[String],"required":true})
tags: string[];
@Prop()
alternateObjectId?: mongoose.Types.ObjectId;
@Prop({"type":mongoose.Types.Map<String>})
socialMediaHandles?: Map<string, string>;
@Prop({"type":[mongoose.Types.Map<Number>],"required":true})
arrayOfMaps: (Map<string, number>)[];
@Prop({"type":mongoose.Types.Map<[Number]>})
mapOfArrays?: Map<string, number[]>;
@Prop({"required":function (this: UserDocument) {
  // This is irrelevant, we're just testing that setting `required: function() {...}` leaves the field "optional" in the generated typescript.
  return !!this.alternateObjectId
 }})
requiredIsFunction?: number;
@Prop({"required":true,"type":Buffer})
buffer: Buffer;
@Prop({"type":Buffer})
bufferString?: Buffer;
@Prop({"default":null,"type":Buffer})
bufferSchemaType?: Buffer;
@Prop()
decimal128?: number;
@Prop()
otherDecimal128?: number;
@Prop()
numberString?: number;
@Prop()
stringString?: string;
@Prop()
booleanString?: boolean;
@Prop()
dateString?: Date;
@Prop({"required":true})
otherNumberString: number;
@Prop({"required":true})
otherStringString: string;
@Prop({"enum":["a", "b", "c", null]})
enumWithNull?: string;
@Prop({"enum":["a", "b", "c"]})
enumWithoutNull?: string;
_id: mongoose.Types.ObjectId;
 get "name"(): string {
  return `${this.firstName} ${this.lastName}`;
 }
}

export const UserSchema = SchemaFactory.createForClass(User);

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 * 
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string 
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
* Helper type used by `PopulatedDocument`. Returns the child property of a string 
* representing a nested property (i.e. `friend.user` -> `user`).
*/
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
* Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated 
* for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
*/
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & { 
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U> ? 
    mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>> :
    Exclude<Root[T], mongoose.Types.ObjectId> 
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<
DocType,
T
> = T extends keyof DocType
? PopulatedProperty<DocType, T> 
: (
    ParentProperty<T> extends keyof DocType
      ? Omit<DocType, ParentProperty<T>> &
      {
        [ref in ParentProperty<T>]: (
          DocType[ParentProperty<T>] extends mongoose.Types.Array<infer U> ? (
            mongoose.Types.Array<
              ChildProperty<T> extends keyof U 
                ? PopulatedProperty<U, ChildProperty<T>> 
                : PopulatedDocument<U, ChildProperty<T>>
            >
          ) : (
            ChildProperty<T> extends keyof DocType[ParentProperty<T>]
            ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
            : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
          )
        )
      }
      : DocType
  )

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(path: T, select?: string | any, model?: string | Model<any, THelpers>, match?: any): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;

    populate<T extends string>(options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;
  }
}

